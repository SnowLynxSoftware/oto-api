openapi: 3.0.4
info:
  title: Open Trivia Online API
  description: |-
    The Official Open Trivia Online API Rest Service based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). These docs are manually and hand-crafted to attempt to match the actual code base but are not auto-generatd in any way. The actual definitions may be slightly out of date at any time. 
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  termsOfService: https://opentriviaonline.com/terms/
  contact:
    email: snowlynxsoftware@gmail.com
  version: 1.0.12
externalDocs:
  description: Find out more about Open Trivia Online
  url: https://opentriviaonline.com
servers:
  - url: https://opentriviaonline.com/api
paths:
  /health:
    get:
      tags:
        - health
      summary: Simple health check.
      description: A simple health check that returns a 200 OK response if the server is responding to requests.
      operationId: healthCheck
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: ok
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate user with email and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/verify:
    get:
      tags:
        - auth
      summary: Verify user account
      description: Verify user account using verification token
      operationId: verifyAccount
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/send-login-email:
    post:
      tags:
        - auth
      summary: Send login email
      description: Send magic login link to user's email
      operationId: sendLoginEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendLoginEmailRequest"
      responses:
        "200":
          description: Login email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login-with-email:
    get:
      tags:
        - auth
      summary: Login with email token
      description: Login using magic link token from email
      operationId: loginWithEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/token:
    get:
      tags:
        - auth
      summary: Refresh token
      description: Get a new access token using refresh token
      operationId: refreshToken
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/update-password/self:
    post:
      tags:
        - auth
      summary: Update own password
      description: Update the current user's password
      operationId: updatePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /waitlist:
    post:
      tags:
        - waitlist
      summary: Join waitlist
      description: Add user to the application waitlist
      operationId: joinWaitlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WaitlistRequest"
      responses:
        "201":
          description: Successfully added to waitlist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaitlistResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trivia/import-questions:
    post:
      tags:
        - trivia
      summary: Import trivia questions
      description: Import a batch of trivia questions
      operationId: importQuestions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportQuestionsRequest"
      responses:
        "201":
          description: Questions imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportQuestionsResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
        user:
          $ref: "#/components/schemas/User"
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        username:
          type: string
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
    VerifyResponse:
      type: object
      properties:
        message:
          type: string
    SendLoginEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    TokenResponse:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
    UpdatePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    WaitlistRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string
    WaitlistResponse:
      type: object
      properties:
        message:
          type: string
        position:
          type: integer
    ImportQuestionsRequest:
      type: object
      required:
        - questions
      properties:
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
    ImportQuestionsResponse:
      type: object
      properties:
        message:
          type: string
        imported:
          type: integer
    Question:
      type: object
      required:
        - question
        - answers
        - correct
        - category
      properties:
        question:
          type: string
        answers:
          type: array
          items:
            type: string
        correct:
          type: string
        category:
          type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        verified:
          type: boolean
    MessageResponse:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
